generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  status    Status   @default(ACTIVE)
  password  String
  role      UserRole @default(USER)
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order[]
}

model CourseCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now())
  Course    Course[]
}

model Course {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  instructor  String
  fees        Int
  status      Status         @default(ACTIVE)
  catId       String         @db.ObjectId
  img         String
  rating      Int            @default(0)
  language    String
  content     String?
  level       Level
  duration    String
  createAt    DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  category    CourseCategory @relation(fields: [catId], references: [id])
  Order       Order[]
}

model TutorialCategory {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  createAt  DateTime   @default(now())
  updatedAt DateTime   @default(now())
  tutorial  Tutorial[]
}

model Tutorial {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status            @default(ACTIVE)
  catId       String            @db.ObjectId
  videoLink   String
  img         String?
  code        String
  createAt    DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  category    TutorialCategory? @relation(fields: [catId], references: [id])
}

model BlogCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now())
  blog      Blog[]
}

model Blog {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status        @default(ACTIVE)
  catId       String        @db.ObjectId
  videoLink   String
  img         String?
  code        String
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  category    BlogCategory? @relation(fields: [catId], references: [id])
}

model Order {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  courseId  String        @db.ObjectId
  status    PaymentStatus @default(PAID)
  price     Int
  course    Course        @relation(fields: [courseId], references: [id])
  createAt  DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
